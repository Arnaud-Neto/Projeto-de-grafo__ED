import unittest
from meu_grafo_lista_adj import *
from bibgrafo.grafo_errors import *
from bibgrafo.aresta import Aresta


class TestGrafo(unittest.TestCase):

    def setUp(self):
        # Grafo da Paraíba
        self.g_p = MeuGrafo()
        self.g_p.adiciona_vertice("J")
        self.g_p.adiciona_vertice("C")
        self.g_p.adiciona_vertice("E")
        self.g_p.adiciona_vertice("P")
        self.g_p.adiciona_vertice("M")
        self.g_p.adiciona_vertice("T")
        self.g_p.adiciona_vertice("Z")
        self.g_p.adiciona_aresta('a1', 'J', 'C')
        self.g_p.adiciona_aresta('a2', 'C', 'E')
        self.g_p.adiciona_aresta('a3', 'C', 'E')
        self.g_p.adiciona_aresta('a4', 'P', 'C')
        self.g_p.adiciona_aresta('a5', 'P', 'C')
        self.g_p.adiciona_aresta('a6', 'T', 'C')
        self.g_p.adiciona_aresta('a7', 'M', 'C')
        self.g_p.adiciona_aresta('a8', 'M', 'T')
        self.g_p.adiciona_aresta('a9', 'T', 'Z')

        # Clone do Grafo da Paraíba para ver se o método equals está funcionando
        self.g_p2 = MeuGrafo()
        self.g_p2.adiciona_vertice("J")
        self.g_p2.adiciona_vertice("C")
        self.g_p2.adiciona_vertice("E")
        self.g_p2.adiciona_vertice("P")
        self.g_p2.adiciona_vertice("M")
        self.g_p2.adiciona_vertice("T")
        self.g_p2.adiciona_vertice("Z")
        self.g_p2.adiciona_aresta('a1', 'J', 'C')
        self.g_p2.adiciona_aresta('a2', 'C', 'E')
        self.g_p2.adiciona_aresta('a3', 'C', 'E')
        self.g_p2.adiciona_aresta('a4', 'P', 'C')
        self.g_p2.adiciona_aresta('a5', 'P', 'C')
        self.g_p2.adiciona_aresta('a6', 'T', 'C')
        self.g_p2.adiciona_aresta('a7', 'M', 'C')
        self.g_p2.adiciona_aresta('a8', 'M', 'T')
        self.g_p2.adiciona_aresta('a9', 'T', 'Z')

        # Outro clone do Grafo da Paraíba para ver se o método equals está funcionando
        # Esse tem um pequena diferença na primeira aresta
        self.g_p3 = MeuGrafo()
        self.g_p3.adiciona_vertice("J")
        self.g_p3.adiciona_vertice("C")
        self.g_p3.adiciona_vertice("E")
        self.g_p3.adiciona_vertice("P")
        self.g_p3.adiciona_vertice("M")
        self.g_p3.adiciona_vertice("T")
        self.g_p3.adiciona_vertice("Z")
        self.g_p3.adiciona_aresta('a', 'J', 'C')
        self.g_p3.adiciona_aresta('a2', 'C', 'E')
        self.g_p3.adiciona_aresta('a3', 'C', 'E')
        self.g_p3.adiciona_aresta('a4', 'P', 'C')
        self.g_p3.adiciona_aresta('a5', 'P', 'C')
        self.g_p3.adiciona_aresta('a6', 'T', 'C')
        self.g_p3.adiciona_aresta('a7', 'M', 'C')
        self.g_p3.adiciona_aresta('a8', 'M', 'T')
        self.g_p3.adiciona_aresta('a9', 'T', 'Z')

        # Outro clone do Grafo da Paraíba para ver se o método equals está funcionando
        # Esse tem um pequena diferença na segunda aresta
        self.g_p4 = MeuGrafo()
        self.g_p4.adiciona_vertice("J")
        self.g_p4.adiciona_vertice("C")
        self.g_p4.adiciona_vertice("E")
        self.g_p4.adiciona_vertice("P")
        self.g_p4.adiciona_vertice("M")
        self.g_p4.adiciona_vertice("T")
        self.g_p4.adiciona_vertice("Z")
        self.g_p4.adiciona_aresta('a1', 'J', 'C')
        self.g_p4.adiciona_aresta('a2', 'J', 'E')
        self.g_p4.adiciona_aresta('a3', 'C', 'E')
        self.g_p4.adiciona_aresta('a4', 'P', 'C')
        self.g_p4.adiciona_aresta('a5', 'P', 'C')
        self.g_p4.adiciona_aresta('a6', 'T', 'C')
        self.g_p4.adiciona_aresta('a7', 'M', 'C')
        self.g_p4.adiciona_aresta('a8', 'M', 'T')
        self.g_p4.adiciona_aresta('a9', 'T', 'Z')

        # Grafo da Paraíba sem arestas paralelas
        self.g_p_sem_paralelas = MeuGrafo()
        self.g_p_sem_paralelas.adiciona_vertice("J")
        self.g_p_sem_paralelas.adiciona_vertice("C")
        self.g_p_sem_paralelas.adiciona_vertice("E")
        self.g_p_sem_paralelas.adiciona_vertice("P")
        self.g_p_sem_paralelas.adiciona_vertice("M")
        self.g_p_sem_paralelas.adiciona_vertice("T")
        self.g_p_sem_paralelas.adiciona_vertice("Z")
        self.g_p_sem_paralelas.adiciona_aresta('a1', 'J', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a2', 'C', 'E')
        self.g_p_sem_paralelas.adiciona_aresta('a3', 'P', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a4', 'T', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a5', 'M', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a6', 'M', 'T')
        self.g_p_sem_paralelas.adiciona_aresta('a7', 'T', 'Z')

        # Grafos completos
        self.g_c = MeuGrafo()
        self.g_c.adiciona_vertice("J")
        self.g_c.adiciona_vertice("C")
        self.g_c.adiciona_vertice("E")
        self.g_c.adiciona_vertice("P")
        self.g_c.adiciona_aresta('a1', 'J', 'C')
        self.g_c.adiciona_aresta('a2', 'J', 'E')
        self.g_c.adiciona_aresta('a3', 'J', 'P')
        self.g_c.adiciona_aresta('a4', 'E', 'C')
        self.g_c.adiciona_aresta('a5', 'P', 'C')
        self.g_c.adiciona_aresta('a6', 'P', 'E')

        self.g_c2 = MeuGrafo()
        self.g_c2.adiciona_vertice("Nina")
        self.g_c2.adiciona_vertice("Maria")
        self.g_c2.adiciona_aresta('amiga', 'Nina', 'Maria')

        self.g_c3 = MeuGrafo()
        self.g_c3.adiciona_vertice("Único")

        # Grafos com laco
        self.g_l1 = MeuGrafo()
        self.g_l1.adiciona_vertice("A")
        self.g_l1.adiciona_vertice("B")
        self.g_l1.adiciona_vertice("C")
        self.g_l1.adiciona_vertice("D")
        self.g_l1.adiciona_aresta('a1', 'A', 'A')
        self.g_l1.adiciona_aresta('a2', 'A', 'B')
        self.g_l1.adiciona_aresta('a3', 'A', 'A')

        self.g_l2 = MeuGrafo()
        self.g_l2.adiciona_vertice("A")
        self.g_l2.adiciona_vertice("B")
        self.g_l2.adiciona_vertice("C")
        self.g_l2.adiciona_vertice("D")
        self.g_l2.adiciona_aresta('a1', 'A', 'B')
        self.g_l2.adiciona_aresta('a2', 'B', 'B')
        self.g_l2.adiciona_aresta('a3', 'B', 'A')

        self.g_l3 = MeuGrafo()
        self.g_l3.adiciona_vertice("A")
        self.g_l3.adiciona_vertice("B")
        self.g_l3.adiciona_vertice("C")
        self.g_l3.adiciona_vertice("D")
        self.g_l3.adiciona_aresta('a1', 'C', 'A')
        self.g_l3.adiciona_aresta('a2', 'C', 'C')
        self.g_l3.adiciona_aresta('a3', 'D', 'D')
        self.g_l3.adiciona_aresta('a4', 'D', 'D')

        self.g_l4 = MeuGrafo()
        self.g_l4.adiciona_vertice("D")
        self.g_l4.adiciona_aresta('a1', 'D', 'D')

        self.g_l5 = MeuGrafo()
        self.g_l5.adiciona_vertice("C")
        self.g_l5.adiciona_vertice("D")
        self.g_l5.adiciona_aresta('a1', 'D', 'C')
        self.g_l5.adiciona_aresta('a2', 'C', 'C')

        # Grafos desconexos
        self.g_d = MeuGrafo()
        self.g_d.adiciona_vertice("A")
        self.g_d.adiciona_vertice("B")
        self.g_d.adiciona_vertice("C")
        self.g_d.adiciona_vertice("D")
        self.g_d.adiciona_aresta('asd', 'A', 'B')

        self.g_d2 = MeuGrafo()
        self.g_d2.adiciona_vertice("A")
        self.g_d2.adiciona_vertice("B")
        self.g_d2.adiciona_vertice("C")
        self.g_d2.adiciona_vertice("D")

        self.g_ep = MeuGrafo()
        self.g_ep.adiciona_vertice('A')
        self.g_ep.adiciona_vertice('B')
        self.g_ep.adiciona_vertice('C')
        self.g_ep.adiciona_vertice('D')
        self.g_ep.adiciona_vertice('E')
        self.g_ep.adiciona_vertice('F')
        self.g_ep.adiciona_vertice('G')
        self.g_ep.adiciona_vertice('H')
        self.g_ep.adiciona_vertice('I')
        self.g_ep.adiciona_vertice('J')
        self.g_ep.adiciona_vertice('K')
        self.g_ep.adiciona_aresta('a1','A','B')
        self.g_ep.adiciona_aresta('a2','A','G')
        self.g_ep.adiciona_aresta('a3','A','J')
        self.g_ep.adiciona_aresta('a4','B','C')
        self.g_ep.adiciona_aresta('a5','B','D')
        self.g_ep.adiciona_aresta('a6','B','E')
        self.g_ep.adiciona_aresta('a7','B','F')
        self.g_ep.adiciona_aresta('a8','B','G')
        self.g_ep.adiciona_aresta('a9','C','D')
        self.g_ep.adiciona_aresta('a10','D','E')
        self.g_ep.adiciona_aresta('a11','F','H')
        self.g_ep.adiciona_aresta('a12','G','H')
        self.g_ep.adiciona_aresta('a13','G','I')
        self.g_ep.adiciona_aresta('a14','G','J')
        self.g_ep.adiciona_aresta('a15','G','K')
        self.g_ep.adiciona_aresta('a16','I','J')
        self.g_ep.adiciona_aresta('a17','J','K')

        # Resultado de Codigo DFS aplicado no Grafo da Paraíba começando de J
        self.g_p_DFS1 = MeuGrafo()
        self.g_p_DFS1.adiciona_vertice('J')
        self.g_p_DFS1.adiciona_vertice('C')
        self.g_p_DFS1.adiciona_vertice('E')
        self.g_p_DFS1.adiciona_vertice('P')
        self.g_p_DFS1.adiciona_vertice('T')
        self.g_p_DFS1.adiciona_vertice('M')
        self.g_p_DFS1.adiciona_vertice('Z')
        self.g_p_DFS1.adiciona_aresta('a1', 'J', 'C')
        self.g_p_DFS1.adiciona_aresta('a2', 'C', 'E')
        self.g_p_DFS1.adiciona_aresta('a4', 'P', 'C')
        self.g_p_DFS1.adiciona_aresta('a6', 'T', 'C')
        self.g_p_DFS1.adiciona_aresta('a8', 'M', 'T')
        self.g_p_DFS1.adiciona_aresta('a9', 'T', 'Z')

        # Resultado de Codigo DFS aplicado no Grafo da Paraíba começando de C
        self.g_p_DFS2 = MeuGrafo()
        self.g_p_DFS2.adiciona_vertice("J")
        self.g_p_DFS2.adiciona_vertice("C")
        self.g_p_DFS2.adiciona_vertice("E")
        self.g_p_DFS2.adiciona_vertice("P")
        self.g_p_DFS2.adiciona_vertice("M")
        self.g_p_DFS2.adiciona_vertice("T")
        self.g_p_DFS2.adiciona_vertice("Z")
        self.g_p_DFS2.adiciona_aresta('a1', 'J', 'C')
        self.g_p_DFS2.adiciona_aresta('a2', 'C', 'E')
        self.g_p_DFS2.adiciona_aresta('a4', 'P', 'C')
        self.g_p_DFS2.adiciona_aresta('a6', 'T', 'C')
        self.g_p_DFS2.adiciona_aresta('a8', 'M', 'T')
        self.g_p_DFS2.adiciona_aresta('a9', 'T', 'Z')

        # Grafo novo para teste de DFS

        self.g_DFS = MeuGrafo()
        self.g_DFS.adiciona_vertice('A')
        self.g_DFS.adiciona_vertice('B')
        self.g_DFS.adiciona_vertice('C')
        self.g_DFS.adiciona_vertice('D')
        self.g_DFS.adiciona_vertice('E')
        self.g_DFS.adiciona_vertice('F')
        self.g_DFS.adiciona_vertice('G')
        self.g_DFS.adiciona_vertice('H')
        self.g_DFS.adiciona_vertice('I')
        self.g_DFS.adiciona_vertice('J')
        self.g_DFS.adiciona_vertice('K')
        self.g_DFS.adiciona_vertice('L')
        self.g_DFS.adiciona_aresta('a1','A','B')
        self.g_DFS.adiciona_aresta('a2','A','C')
        self.g_DFS.adiciona_aresta('a3','A','G')
        self.g_DFS.adiciona_aresta('a4','B','C')
        self.g_DFS.adiciona_aresta('a5','C','F')
        self.g_DFS.adiciona_aresta('a6','D','E')
        self.g_DFS.adiciona_aresta('a7','D','F')
        self.g_DFS.adiciona_aresta('a8','F','I')
        self.g_DFS.adiciona_aresta('a9','F','J')
        self.g_DFS.adiciona_aresta('a10','F','K')
        self.g_DFS.adiciona_aresta('a11','G','H')
        self.g_DFS.adiciona_aresta('a12','H','L')
        self.g_DFS.adiciona_aresta('a13','I','L')
        self.g_DFS.adiciona_aresta('a14','J','L')
        self.g_DFS.adiciona_aresta('a15','K','L')

        # Resultado de Codigo DFS aplicado em g_DFS a partir de A
        self.g_DFS_DFS = MeuGrafo()
        self.g_DFS_DFS.adiciona_vertice('A')
        self.g_DFS_DFS.adiciona_vertice('B')
        self.g_DFS_DFS.adiciona_vertice('C')
        self.g_DFS_DFS.adiciona_vertice('D')
        self.g_DFS_DFS.adiciona_vertice('E')
        self.g_DFS_DFS.adiciona_vertice('F')
        self.g_DFS_DFS.adiciona_vertice('G')
        self.g_DFS_DFS.adiciona_vertice('H')
        self.g_DFS_DFS.adiciona_vertice('I')
        self.g_DFS_DFS.adiciona_vertice('J')
        self.g_DFS_DFS.adiciona_vertice('K')
        self.g_DFS_DFS.adiciona_vertice('L')
        self.g_DFS_DFS.adiciona_aresta('a1','A','B')
        self.g_DFS_DFS.adiciona_aresta('a4','B','C')
        self.g_DFS_DFS.adiciona_aresta('a5','C','F')
        self.g_DFS_DFS.adiciona_aresta('a6','D','E')
        self.g_DFS_DFS.adiciona_aresta('a7','D','F')
        self.g_DFS_DFS.adiciona_aresta('a10','F','K')
        self.g_DFS_DFS.adiciona_aresta('a11','G','H')
        self.g_DFS_DFS.adiciona_aresta('a12','H','L')
        self.g_DFS_DFS.adiciona_aresta('a13','I','L')
        self.g_DFS_DFS.adiciona_aresta('a14','J','L')
        self.g_DFS_DFS.adiciona_aresta('a15','K','L')

        # Grafo da paraiba com uma pequena diferença nas arestas a6,a3,a5
        self.g_p5 = MeuGrafo()
        self.g_p5.adiciona_vertice("J")
        self.g_p5.adiciona_vertice("C")
        self.g_p5.adiciona_vertice("E")
        self.g_p5.adiciona_vertice("P")
        self.g_p5.adiciona_vertice("M")
        self.g_p5.adiciona_vertice("T")
        self.g_p5.adiciona_vertice("Z")
        self.g_p5.adiciona_aresta('a1', 'J', 'C')
        self.g_p5.adiciona_aresta('a2', 'C', 'E')
        self.g_p5.adiciona_aresta('a3', 'E', 'C')
        self.g_p5.adiciona_aresta('a4', 'P', 'C')
        self.g_p5.adiciona_aresta('a5', 'C', 'P')
        self.g_p5.adiciona_aresta('a6', 'C', 'T')
        self.g_p5.adiciona_aresta('a7', 'M', 'C')
        self.g_p5.adiciona_aresta('a8', 'M', 'T')
        self.g_p5.adiciona_aresta('a9', 'T', 'Z')

        # Resultados de todos os menores caminho Bellman-Ford no grafo da paraíba 5, de J até Z
        lista_Bell = []
        
        Tg_Bell1 = MeuGrafo()
        Tg_Bell1.adiciona_vertice('J')
        Tg_Bell1.adiciona_vertice('C')
        Tg_Bell1.adiciona_vertice('T')
        Tg_Bell1.adiciona_vertice('Z')
        Tg_Bell1.adiciona_aresta('a1','J','C')
        Tg_Bell1.adiciona_aresta('a6','C','T')
        Tg_Bell1.adiciona_aresta('a9','T','Z')
        lista_Bell.append(Tg_Bell1)

        self.Tupla_Bell = (True,lista_Bell)

        # Grafo para testar menores caminhos de Bellman_Ford
        self.g_Bell1 = MeuGrafo()
        self.g_Bell1.adiciona_vertice('A')
        self.g_Bell1.adiciona_vertice('B')
        self.g_Bell1.adiciona_vertice('C')
        self.g_Bell1.adiciona_vertice('D')
        self.g_Bell1.adiciona_vertice('E')
        self.g_Bell1.adiciona_vertice('F')
        self.g_Bell1.adiciona_vertice('G')
        self.g_Bell1.adiciona_aresta('a1','A','C',1)
        self.g_Bell1.adiciona_aresta('a2','A','D',1)
        self.g_Bell1.adiciona_aresta('a3','A','E',1)
        self.g_Bell1.adiciona_aresta('a4','A','F',1)
        self.g_Bell1.adiciona_aresta('a5','A','G',1)
        self.g_Bell1.adiciona_aresta('a6','C','B',1)
        self.g_Bell1.adiciona_aresta('a7','D','B',1)
        self.g_Bell1.adiciona_aresta('a8','E','B',1)
        self.g_Bell1.adiciona_aresta('a9','F','B',1)
        self.g_Bell1.adiciona_aresta('a10','G','B',2)

        # Resultado do menores caminhos de Bellman-Ford em g_Bell1, de A até B
        lista_Bell2 = []

        Tg_Bell2 = MeuGrafo()
        Tg_Bell2.adiciona_vertice('A')
        Tg_Bell2.adiciona_vertice('C')
        Tg_Bell2.adiciona_vertice('B')
        Tg_Bell2.adiciona_aresta('a1','A','C',1)
        Tg_Bell2.adiciona_aresta('a6','C','B',1)
        lista_Bell2.append(Tg_Bell2)

        Tg_Bell2 = MeuGrafo()
        Tg_Bell2.adiciona_vertice('A')
        Tg_Bell2.adiciona_vertice('D')
        Tg_Bell2.adiciona_vertice('B')
        Tg_Bell2.adiciona_aresta('a2','A','D',1)
        Tg_Bell2.adiciona_aresta('a7','D','B',1)
        lista_Bell2.append(Tg_Bell2)
        
        Tg_Bell2 = MeuGrafo()
        Tg_Bell2.adiciona_vertice('A')
        Tg_Bell2.adiciona_vertice('E')
        Tg_Bell2.adiciona_vertice('B')
        Tg_Bell2.adiciona_aresta('a3','A','E',1)
        Tg_Bell2.adiciona_aresta('a8','E','B',1)
        lista_Bell2.append(Tg_Bell2)

        Tg_Bell2 = MeuGrafo()
        Tg_Bell2.adiciona_vertice('A')
        Tg_Bell2.adiciona_vertice('F')
        Tg_Bell2.adiciona_vertice('B')
        Tg_Bell2.adiciona_aresta('a4','A','F',1)
        Tg_Bell2.adiciona_aresta('a9','F','B',1)
        lista_Bell2.append(Tg_Bell2)

        self.Tupla_Bell2 = (True,lista_Bell2)

        # grafo para testar menores caminhos de Bellman-Ford com pesos variados
        self.g_Val_Bell = MeuGrafo()
        self.g_Val_Bell.adiciona_vertice('A')
        self.g_Val_Bell.adiciona_vertice('B')
        self.g_Val_Bell.adiciona_vertice('C')
        self.g_Val_Bell.adiciona_vertice('D')
        self.g_Val_Bell.adiciona_vertice('E')
        self.g_Val_Bell.adiciona_vertice('F')
        self.g_Val_Bell.adiciona_vertice('G')
        self.g_Val_Bell.adiciona_vertice('H')
        self.g_Val_Bell.adiciona_vertice('I')
        self.g_Val_Bell.adiciona_vertice('J')
        self.g_Val_Bell.adiciona_vertice('K')
        self.g_Val_Bell.adiciona_vertice('L')
        self.g_Val_Bell.adiciona_vertice('M')
        self.g_Val_Bell.adiciona_aresta('a1','A','B',3)
        self.g_Val_Bell.adiciona_aresta('a2','A','C',2)
        self.g_Val_Bell.adiciona_aresta('a3','B','C',-2)
        self.g_Val_Bell.adiciona_aresta('a4','C','D',3)
        self.g_Val_Bell.adiciona_aresta('a5','C','G',-1)
        self.g_Val_Bell.adiciona_aresta('a6','C','H',2)
        self.g_Val_Bell.adiciona_aresta('a7','D','I',5)
        self.g_Val_Bell.adiciona_aresta('a8','E','F',-1)
        self.g_Val_Bell.adiciona_aresta('a9','E','L',3)
        self.g_Val_Bell.adiciona_aresta('a10','F','G',2)
        self.g_Val_Bell.adiciona_aresta('a11','J','F',1)
        self.g_Val_Bell.adiciona_aresta('a12','G','H',2)
        self.g_Val_Bell.adiciona_aresta('a13','H','G',2)
        self.g_Val_Bell.adiciona_aresta('a14','G','K',2)
        self.g_Val_Bell.adiciona_aresta('a15','H','I',2)
        self.g_Val_Bell.adiciona_aresta('a16','I','H',-1)
        self.g_Val_Bell.adiciona_aresta('a17','H','J',2)
        self.g_Val_Bell.adiciona_aresta('a18','I','M',-3)
        self.g_Val_Bell.adiciona_aresta('a19','K','L',-3)
        self.g_Val_Bell.adiciona_aresta('a20','L','M',2)

        # Resultado do menores caminhos de Bellman-Ford em g_Val_Bell, de A até M
        lista_Val_Bell = []

        Tg_Val_Bell = MeuGrafo()
        Tg_Val_Bell.adiciona_vertice('A')
        Tg_Val_Bell.adiciona_vertice('B')
        Tg_Val_Bell.adiciona_vertice('C')
        Tg_Val_Bell.adiciona_vertice('G')
        Tg_Val_Bell.adiciona_vertice('H')
        Tg_Val_Bell.adiciona_vertice('I')
        Tg_Val_Bell.adiciona_vertice('M')
        Tg_Val_Bell.adiciona_aresta('a1','A','B',3)
        Tg_Val_Bell.adiciona_aresta('a3','B','C',-2)
        Tg_Val_Bell.adiciona_aresta('a5','C','G',-1)
        Tg_Val_Bell.adiciona_aresta('a12','G','H',2)
        Tg_Val_Bell.adiciona_aresta('a15','H','I',2)
        Tg_Val_Bell.adiciona_aresta('a18','I','M',-3)
        lista_Val_Bell.append(Tg_Val_Bell)


        Tg_Val_Bell = MeuGrafo()
        Tg_Val_Bell.adiciona_vertice('A')
        Tg_Val_Bell.adiciona_vertice('B')
        Tg_Val_Bell.adiciona_vertice('C')
        Tg_Val_Bell.adiciona_vertice('G')
        Tg_Val_Bell.adiciona_vertice('K')
        Tg_Val_Bell.adiciona_vertice('L')
        Tg_Val_Bell.adiciona_vertice('M')
        Tg_Val_Bell.adiciona_aresta('a1','A','B',3)
        Tg_Val_Bell.adiciona_aresta('a3','B','C',-2)
        Tg_Val_Bell.adiciona_aresta('a5','C','G',-1)
        Tg_Val_Bell.adiciona_aresta('a14','G','K',2)
        Tg_Val_Bell.adiciona_aresta('a19','K','L',-3)
        Tg_Val_Bell.adiciona_aresta('a20','L','M',2)
        lista_Val_Bell.append(Tg_Val_Bell)

        self.Tupla_Val_Bell = (True,lista_Val_Bell)

        # grafo para testar menores caminhos de Bellman-Ford caso de erro 1, "Ciclo Negativo"
        self.g_Bell2 = MeuGrafo()
        self.g_Bell2.adiciona_vertice('A')
        self.g_Bell2.adiciona_vertice('B')
        self.g_Bell2.adiciona_vertice('C')
        self.g_Bell2.adiciona_aresta('a1','A','B',1)
        self.g_Bell2.adiciona_aresta('a2','C','A',-1)
        self.g_Bell2.adiciona_aresta('a3','B','C',-1)

        # Resultado de menores caminhos de Bellman-Ford em g_Bell2, de A até B
        self.Tupla_Bell3 = (False,'Ciclo Negativo')

        #novo caso de teste
        self.grafo_sla = MeuGrafo()
        self.grafo_sla.adiciona_vertice('A')
        self.grafo_sla.adiciona_vertice('B')
        self.grafo_sla.adiciona_vertice('C')
        self.grafo_sla.adiciona_vertice('D')
        self.grafo_sla.adiciona_vertice('E')
        self.grafo_sla.adiciona_vertice('F')
        self.grafo_sla.adiciona_vertice('G')
        self.grafo_sla.adiciona_vertice('H')

        #arestas do novo caso de teste
        self.grafo_sla.adiciona_aresta("a1", "A", "B", -1)
        self.grafo_sla.adiciona_aresta("a2", "A", "C", -3)
        self.grafo_sla.adiciona_aresta("a3", "B", "D", 2)
        self.grafo_sla.adiciona_aresta("a4", "C", "H", 2)
        self.grafo_sla.adiciona_aresta("a5", "D", "E", 5)
        self.grafo_sla.adiciona_aresta("a6", "H", "G", 3)
        self.grafo_sla.adiciona_aresta("a7", "E", "F", 5)
        self.grafo_sla.adiciona_aresta("a8", "G", "F", 1)

        





        

    def test_adiciona_aresta(self):
        self.assertTrue(self.g_p.adiciona_aresta('a10', 'J', 'C'))
        a = Aresta("zxc", self.g_p.get_vertice("C"), self.g_p.get_vertice("Z"))
        self.assertTrue(self.g_p.adiciona_aresta(a))
        with self.assertRaises(ArestaInvalidaError):
            self.assertTrue(self.g_p.adiciona_aresta(a))
        with self.assertRaises(VerticeInvalidoError):
            self.assertTrue(self.g_p.adiciona_aresta('b1', '', 'C'))
        with self.assertRaises(VerticeInvalidoError):
            self.assertTrue(self.g_p.adiciona_aresta('b1', 'A', 'C'))
        with self.assertRaises(NotImplementedError):
            self.g_p.adiciona_aresta('')
        with self.assertRaises(NotImplementedError):
            self.g_p.adiciona_aresta('aa-bb')
        with self.assertRaises(VerticeInvalidoError):
            self.g_p.adiciona_aresta('x', 'J', 'V')
        with self.assertRaises(ArestaInvalidaError):
            self.g_p.adiciona_aresta('a1', 'J', 'C')

    def test_eq(self):
        self.assertEqual(self.g_p, self.g_p2)
        self.assertNotEqual(self.g_p, self.g_p3)
        self.assertNotEqual(self.g_p, self.g_p_sem_paralelas)
        self.assertNotEqual(self.g_p, self.g_p4)

    def test_vertices_nao_adjacentes(self):
        self.assertEqual(self.g_p.vertices_nao_adjacentes(),
                         {'J-E', 'J-P', 'J-M', 'J-T', 'J-Z', 'C-Z', 'E-P', 'E-M', 'E-T', 'E-Z', 'P-M', 'P-T', 'P-Z',
                          'M-Z'})
        self.assertEqual(self.g_d.vertices_nao_adjacentes(), {'A-C', 'A-D', 'B-C', 'B-D', 'C-D'})
        self.assertEqual(self.g_d2.vertices_nao_adjacentes(), {'A-B', 'A-C', 'A-D', 'B-C', 'B-D', 'C-D'})
        self.assertEqual(self.g_c.vertices_nao_adjacentes(), set())
        self.assertEqual(self.g_c3.vertices_nao_adjacentes(), set())

    def test_ha_laco(self):
        self.assertFalse(self.g_p.ha_laco())
        self.assertFalse(self.g_p2.ha_laco())
        self.assertFalse(self.g_p3.ha_laco())
        self.assertFalse(self.g_p4.ha_laco())
        self.assertFalse(self.g_p_sem_paralelas.ha_laco())
        self.assertFalse(self.g_d.ha_laco())
        self.assertFalse(self.g_c.ha_laco())
        self.assertFalse(self.g_c2.ha_laco())
        self.assertFalse(self.g_c3.ha_laco())
        self.assertTrue(self.g_l1.ha_laco())
        self.assertTrue(self.g_l2.ha_laco())
        self.assertTrue(self.g_l3.ha_laco())
        self.assertTrue(self.g_l4.ha_laco())
        self.assertTrue(self.g_l5.ha_laco())

    def test_grau(self):
        # Paraíba
        self.assertEqual(self.g_p.grau('J'), 1)
        self.assertEqual(self.g_p.grau('C'), 7)
        self.assertEqual(self.g_p.grau('E'), 2)
        self.assertEqual(self.g_p.grau('P'), 2)
        self.assertEqual(self.g_p.grau('M'), 2)
        self.assertEqual(self.g_p.grau('T'), 3)
        self.assertEqual(self.g_p.grau('Z'), 1)
        with self.assertRaises(VerticeInvalidoError):
            self.assertEqual(self.g_p.grau('G'), 5)

        self.assertEqual(self.g_d.grau('A'), 1)
        self.assertEqual(self.g_d.grau('C'), 0)
        self.assertNotEqual(self.g_d.grau('D'), 2)
        self.assertEqual(self.g_d2.grau('A'), 0)

        # Completos
        self.assertEqual(self.g_c.grau('J'), 3)
        self.assertEqual(self.g_c.grau('C'), 3)
        self.assertEqual(self.g_c.grau('E'), 3)
        self.assertEqual(self.g_c.grau('P'), 3)

        # Com laço. Lembrando que cada laço conta 2 vezes por vértice para cálculo do grau
        self.assertEqual(self.g_l1.grau('A'), 5)
        self.assertEqual(self.g_l2.grau('B'), 4)
        self.assertEqual(self.g_l4.grau('D'), 2)

    def test_ha_paralelas(self):
        self.assertTrue(self.g_p.ha_paralelas())
        self.assertFalse(self.g_p_sem_paralelas.ha_paralelas())
        self.assertFalse(self.g_c.ha_paralelas())
        self.assertFalse(self.g_c2.ha_paralelas())
        self.assertFalse(self.g_c3.ha_paralelas())
        self.assertTrue(self.g_l1.ha_paralelas())

    def test_arestas_sobre_vertice(self):
        self.assertEqual(self.g_p.arestas_sobre_vertice('J'), {'a1'})
        self.assertEqual(self.g_p.arestas_sobre_vertice('C'), {'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'})
        self.assertEqual(self.g_p.arestas_sobre_vertice('M'), {'a7', 'a8'})
        self.assertEqual(self.g_l2.arestas_sobre_vertice('B'), {'a1', 'a2', 'a3'})
        self.assertEqual(self.g_d.arestas_sobre_vertice('C'), set())
        self.assertEqual(self.g_d.arestas_sobre_vertice('A'), {'asd'})
        with self.assertRaises(VerticeInvalidoError):
            self.g_p.arestas_sobre_vertice('A')

    def test_eh_completo(self):
        self.assertFalse(self.g_p.eh_completo())
        self.assertFalse((self.g_p_sem_paralelas.eh_completo()))
        self.assertTrue((self.g_c.eh_completo()))
        self.assertTrue((self.g_c2.eh_completo()))
        self.assertTrue((self.g_c3.eh_completo()))
        self.assertFalse((self.g_l1.eh_completo()))
        self.assertFalse((self.g_l2.eh_completo()))
        self.assertFalse((self.g_l3.eh_completo()))
        self.assertFalse((self.g_l4.eh_completo()))
        self.assertFalse((self.g_l5.eh_completo()))
        self.assertFalse((self.g_d.eh_completo()))
        self.assertFalse((self.g_d2.eh_completo()))

    def test_dfs(self):
        self.assertEqual(self.g_p.dfs('J'),self.g_p_DFS1)
        self.assertEqual(self.g_p.dfs('C'),self.g_p_DFS2)
        self.assertEqual(self.g_DFS.dfs('A'),self.g_DFS_DFS)

    def test_Menores_Caminhos_Bellman_Ford(self):
        self.assertEqual(self.g_p5.Menores_Caminhos_Bellman_Ford('J','Z'),self.Tupla_Bell)
        self.assertEqual(self.g_Bell1.Menores_Caminhos_Bellman_Ford('A','B'),self.Tupla_Bell2)
        self.assertEqual(self.g_Bell2.Menores_Caminhos_Bellman_Ford('A','B'),self.Tupla_Bell3)
        self.assertEqual(self.g_Val_Bell.Menores_Caminhos_Bellman_Ford('A','M'),self.Tupla_Val_Bell)


